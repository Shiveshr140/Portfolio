body {
    margin:0px;
}

.grid > * {
    border: 1px dashed red;
}

.grid {
    display:grid;
    padding:8px;
    grid-template-columns: 300px 1fr;
    grid-template-areas:
    "header header"
    "sidebar content"
    "footer footer"
    ;
}

.header {
    grid-area: header;
}

.sidebar {
    grid-area:sidebar;
}

.content{
    grid-area: content;
}

.footer {
    grid-area: footer;
    text-align: center;
}


/* If we see above .grid{ grid-templates-columns=300px 1fr }  that means if we see sidebar will take 300px that is fix and rest of space will be taken by content
now if reduce oue screen size the it become weired so we need media query that will make content goes below the side bar if screen size reduces */

/* And how to do that is we use the @media query like that. And then max-width, is 720px . What that's going to do is that when the
width is less than 720, it's going to run whatever CSS you define in here. Whenever the width is great then 720, it's going to just run that.
It's important to note that this runs regardless of whether the media query runs or not. So this is going to run.
And then we can apply any modifications to this code in here for a small screen size. So what we'll do is we'll target the same element and we don't have to set
display to grid because that's already set for us by running this code here. But what we do want to do is change grid template columns.
And we want only one column. So we'll do grid template columns: 1fr. */

/* So that is a fantastic way of ensuring your pages are mobile friendly or responsive. Those two are terms for basically the same thing. */

@media (max-width:720px){
    .grid{
        grid-template-columns: 1fr;
        grid-template-areas:
        "header"
        "sidebar"
        "content"
        "footer"
        ;

    }
}







